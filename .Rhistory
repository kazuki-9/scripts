devtools::install_github("carlos-alberto-silva/ForestGapR")
library(terra)
devtools::install_github("carlos-alberto-silva/ForestGapR")
library(tiff)
library(viridis)
library(raster)
my_input_dir <- file.path('G:/Temp/B/Uchino/data/chm')
# list all tif files
my_tif_files <- list.files(my_input_dir,
pattern = '*.tif',
full.names = T)
# read one raster CHM
chm.1 <- rast(my_tif_files[1])
chm.1
chm.2 <- rast(my_tif_files[2])
chm.2
# assign CRS
crs(chm.1) <- "EPSG:25832"
chm.1
crs(chm.2) <- "EPSG:25832"
chm.2
# plotting
terra::plot(chm.1)# forest canopy gap ----
# Plotting chm
plot(chm.1, col=viridis(10))
# Setting height thresholds (e.g. 10 meters)
threshold<- 20
size<-c(1,1000) # m2. The max and min size to include. Outside this range is not
gaps_duc <- ForestGapR::getForestGaps(chm_layer = chm.1, threshold=threshold, size=size)
plot(gaps_duc, col="red", add=TRUE, main="Forest Canopy Gap", legend=FALSE)
# plotting chm.2
plot(chm.2, col = viridis(10))
# gap encoding, plot the map & gaps, get stats at the same time
{
gaps_chm.2 <- ForestGapR::getForestGaps(chm_layer = chm.2, threshold = 15, size = size)
plot(chm.2, col = viridis(10))
plot(gaps_chm.2, col="red", add=TRUE, main="Forest Canopy Gap", legend=FALSE)
gaps_stats_chm.2 <- ForestGapR::GapStats(gap_layer = gaps_chm.2, chm_layer = chm.2)
print(gaps_stats_chm.2)
}
# Gap detection in a sequence
nthresholds <- c(10, 12, 15, 20, 25)
gaps_stack <- raster::stack()
for (i in nthresholds) {
gaps_i <- ForestGapR::getForestGaps(chm_layer = chm.2, threshold = i, size = size)
names(gaps_i) <- paste0("gaps_", i, "m")
gaps_stack <- raster::stack(gaps_stack, gaps_i)
}
# Gap detection in a sequence
nthresholds <- c(10, 12, 15, 20, 25)
# Create an empty list to store raster layers
gaps_layers <- list()
for (i in nthresholds) {
gaps_i <- ForestGapR::getForestGaps(chm_layer = chm.2, threshold = i, size = size)
names(gaps_i) <- paste0("gaps_", i, "m")
# Add the current forest gap raster layer to the list
gaps_layers[[length(gaps_layers) + 1]] <- gaps_i
}
# Stack the raster layers in the list to create the raster stack
gaps_stack <- stack(gaps_layers)
# Stack the raster layers in the list to create the raster stack
gaps_stack <- raster::stack(gaps_layers)
gaps_layers
?getForestGaps
# Stack the raster layers in the list to create the raster stack
gaps_stack <- raster::stack(gaps_layers, gaps_i)
gaps_i
gaps_layers
par(mfrow = c(2, 3))
gaps_layers$gaps_10m
gaps_layers[[name == gaps_10m]]
gaps_layers[[gaps_layers$name == gaps_10m]],
gaps_layers[[gaps_layers$name == gaps_10m]]
gaps_layers[[gaps_layers$name == 'gaps_10m']]
gaps_layers[[gaps_layers$name == 'gaps_10m']]
gaps_layers[[gaps_layers$name == 'gaps_10m']]
gaps_layers[[gaps_layers$name == "gaps_10m"]]
gaps_layers[[gaps_layers$name == "gaps_10m"]]
gaps_layers$name
gaps_layers[[1]]
plot(gaps_layers[[1]], col = "red", add = TRUE, legend = FALSE)
# plot gaps
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2, 3))
plot(chm.2, col = viridis(10), main = "Height threshold 10m")
plot(gaps_layers[[1]], col = "red", add = TRUE, legend = FALSE)
plot(ALS_CHM_DUC, col = viridis(10), main = "Height threshold 15m")
# plot gaps
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2, 3))
plot(chm.2, col = viridis(10), main = "Height threshold 10m")
plot(gaps_layers[[1]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 12m")
plot(gaps_layers[[2]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 15m")
plot(gaps_layers[[3]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 20m")
plot(gaps_layers[[4]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 25m")
plot(gaps_layers[[5]], col = "red", add = TRUE, legend = FALSE)
{
plot(chm.2, col = viridis(10), main = "Height threshold 10m")
plot(gaps_layers[[1]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 12m")
plot(gaps_layers[[2]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 15m")
plot(gaps_layers[[3]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 20m")
plot(gaps_layers[[4]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 25m")
plot(gaps_layers[[5]], col = "red", add = TRUE, legend = FALSE)
}
#The development version:
library(devtools)
devtools::install_github("carlos-alberto-silva/ForestGapR")
library(terra)
library(tiff)
library(viridis)
library(raster)
my_input_dir <- file.path('G:/Temp/B/Uchino/data/chm')
# list all tif files
my_tif_files <- list.files(my_input_dir,
pattern = '*.tif',
full.names = T)
# read one raster CHM
chm.1 <- rast(my_tif_files[1])
chm.1 # resolution = 0.5 m x 0.5 m = 50 cm2
rast
chm.2 <- rast(my_tif_files[2])
chm.2
# assign CRS
crs(chm.1) <- "EPSG:25832"
chm.1
terra::size(chm.1)
crs(chm.2) <- "EPSG:25832"
chm.2
# plotting
terra::plot(chm.1)# forest canopy gap ----
# Plotting chm
plot(chm.1, col=viridis(10))
# Setting height thresholds (e.g. 10 meters)
threshold<- 20
size<-c(1,1000) # m2. The max and min size to include. Outside this range is not
# gap encoding, plot the map & gaps, get stats at the same time
{
gaps_chm.2 <- ForestGapR::getForestGaps(chm_layer = chm.2, threshold = 15, size = size)
plot(chm.2, col = viridis(10))
plot(gaps_chm.2, col="red", add=TRUE, main="Forest Canopy Gap", legend=FALSE)
gaps_stats_chm.2 <- ForestGapR::GapStats(gap_layer = gaps_chm.2, chm_layer = chm.2)
print(gaps_stats_chm.2)
}
# Create an empty list to store raster layers
gaps_layers <- list()
for (i in nthresholds) {
gaps_i <- ForestGapR::getForestGaps(chm_layer = chm.2, threshold = i, size = size)
names(gaps_i) <- paste0("gaps_", i, "m")
# Add the current forest gap raster layer to the list
gaps_layers[[length(gaps_layers) + 1]] <- gaps_i
}
nthresholds <- c(10, 12, 15, 20, 25)
for (i in nthresholds) {
gaps_i <- ForestGapR::getForestGaps(chm_layer = chm.2, threshold = i, size = size)
names(gaps_i) <- paste0("gaps_", i, "m")
# Add the current forest gap raster layer to the list
gaps_layers[[length(gaps_layers) + 1]] <- gaps_i
}
sats.1 <- ForestGapR::GapStats(gap_layer = gaps_layers[[1]], chm_layer = chm.2)
sats.1
stats_list <- list()
for (i in length(gaps_layers)) {
stats_list[i,] <- ForestGapR::GapStats(gap_layer = gaps_layers[[i]], chm_layer = chm.2)
}
for (i in length(gaps_layers)) {
stats_list[,i] <- ForestGapR::GapStats(gap_layer = gaps_layers[[i]], chm_layer = chm.2)
}
for (i in length(gaps_layers)) {
stats_list[i] <- ForestGapR::GapStats(gap_layer = gaps_layers[[i]], chm_layer = chm.2)
}
# get gap stats
{
sats.1 <- ForestGapR::GapStats(gap_layer = gaps_layers[[1]], chm_layer = chm.2)
sats.2 <- ForestGapR::GapStats(gap_layer = gaps_layers[[2]], chm_layer = chm.2)
sats.3 <- ForestGapR::GapStats(gap_layer = gaps_layers[[3]], chm_layer = chm.2)
sats.4 <- ForestGapR::GapStats(gap_layer = gaps_layers[[4]], chm_layer = chm.2)
sats.5 <- ForestGapR::GapStats(gap_layer = gaps_layers[[5]], chm_layer = chm.2)
}
# get gap stats ----
{
stats.1 <- ForestGapR::GapStats(gap_layer = gaps_layers[[1]], chm_layer = chm.2)
stats.2 <- ForestGapR::GapStats(gap_layer = gaps_layers[[2]], chm_layer = chm.2)
stats.3 <- ForestGapR::GapStats(gap_layer = gaps_layers[[3]], chm_layer = chm.2)
stats.4 <- ForestGapR::GapStats(gap_layer = gaps_layers[[4]], chm_layer = chm.2)
stats.5 <- ForestGapR::GapStats(gap_layer = gaps_layers[[5]], chm_layer = chm.2)
}
stats.1
as.data.frame(stats.1)
as.data.frame(stats.1)
stats.1 <- as.data.frame(stats.1)
stats.1
View(stats.1)
View(stats.2)
sum(stats.1$gap_area)
sum(stats.2$gap_area)
sum(stats.3$gap_area)
sum(stats.4$gap_area)
sum(stats.5$gap_area)
# plot gaps
{
gaps_layers <- list()
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2, 3))
plot(chm.2, col = viridis(10), main = "Height threshold 10m")
plot(gaps_layers[[1]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 12m")
plot(gaps_layers[[2]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 15m")
plot(gaps_layers[[3]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 20m")
plot(gaps_layers[[4]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 25m")
plot(gaps_layers[[5]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Template")
}
for (i in nthresholds) {
gaps_i <- ForestGapR::getForestGaps(chm_layer = chm.2, threshold = i, size = size)
names(gaps_i) <- paste0("gaps_", i, "m")
# Add the current forest gap raster layer to the list
gaps_layers[[length(gaps_layers) + 1]] <- gaps_i
}
# plot gaps
{
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2, 3))
plot(chm.2, col = viridis(10), main = "Height threshold 10m")
plot(gaps_layers[[1]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 12m")
plot(gaps_layers[[2]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 15m")
plot(gaps_layers[[3]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 20m")
plot(gaps_layers[[4]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Height threshold 25m")
plot(gaps_layers[[5]], col = "red", add = TRUE, legend = FALSE)
plot(chm.2, col = viridis(10), main = "Template")
}
# save as csv
write.csv2(stats.1)
# save as csv
write.csv2(stats.1, "stats tif_2 10m", row.names = F)
write.csv2(stats.2, "stats tif_2 12m", row.names = F)
write.csv2(stats.3, "stats tif_2 15m", row.names = F)
write.csv2(stats.4, "stats tif_2 20m", row.names = F)
write.csv2(stats.5, "stats tif_2 25m", row.names = F)
# save as csv
write.csv2(stats.1, "stats_tif_2_10m.csv", row.names = F)
write.csv2(stats.2, "stats_tif_2_12m.csv", row.names = F)
write.csv2(stats.3, "stats_tif_2_15m.csv", row.names = F)
write.csv2(stats.4, "stats_tif_2_20m.csv", row.names = F)
write.csv2(stats.5, "stats_tif_2_25m.csv", row.names = F)
#The development version:
library(devtools)
devtools::install_github("carlos-alberto-silva/ForestGapR")
library(terra)
library(tiff)
library(viridis)
library(raster)
my_input_dir <- file.path('G:/Temp/B/Uchino/data/chm')
# list all tif files
my_tif_files <- list.files(my_input_dir,
pattern = '*.tif',
full.names = T)
chm.2 <- rast(my_tif_files[2])
chm.2
crs(chm.2) <- "EPSG:25832"
chm.2
# Setting height thresholds (e.g. 10 meters)
threshold<- 20
size<-c(1,1000) # m2. The max and min size to include. Outside this range is not
# plotting chm.2
plot(chm.2, col = viridis(10))
{
nthresholds <- c(10, 12, 15, 20, 25)
# creating an empy raster stack to store multiple gaps as RasterLayers
# empty_raster <- chm.2
# empty_raster[] <- NA
# print(empty_raster)
# gaps_stack <- raster::stack()#2024/5/6 maybe not needed?
}
for (i in nthresholds) {
gaps_i <- ForestGapR::getForestGaps(chm_layer = chm.2, threshold = i, size = size)
names(gaps_i) <- paste0("gaps_", i, "m")
# Add the current forest gap raster layer to the list
gaps_layers[[length(gaps_layers) + 1]] <- gaps_i
}
# get gap stats ----
{
stats.1 <- ForestGapR::GapStats(gap_layer = gaps_layers[[1]], chm_layer = chm.2)
stats.2 <- ForestGapR::GapStats(gap_layer = gaps_layers[[2]], chm_layer = chm.2)
stats.3 <- ForestGapR::GapStats(gap_layer = gaps_layers[[3]], chm_layer = chm.2)
stats.4 <- ForestGapR::GapStats(gap_layer = gaps_layers[[4]], chm_layer = chm.2)
stats.5 <- ForestGapR::GapStats(gap_layer = gaps_layers[[5]], chm_layer = chm.2)
}
# get gap stats ----
{
stats.1 <- ForestGapR::GapStats(gap_layer = gaps_layers[[1]], chm_layer = chm.2)
stats.2 <- ForestGapR::GapStats(gap_layer = gaps_layers[[2]], chm_layer = chm.2)
stats.3 <- ForestGapR::GapStats(gap_layer = gaps_layers[[3]], chm_layer = chm.2)
stats.4 <- ForestGapR::GapStats(gap_layer = gaps_layers[[4]], chm_layer = chm.2)
stats.5 <- ForestGapR::GapStats(gap_layer = gaps_layers[[5]], chm_layer = chm.2)
}
# get gap stats ----
{
stats.1 <- ForestGapR::GapStats(gap_layer = gaps_layers[[1]], chm_layer = chm.2)
stats.2 <- ForestGapR::GapStats(gap_layer = gaps_layers[[2]], chm_layer = chm.2)
stats.3 <- ForestGapR::GapStats(gap_layer = gaps_layers[[3]], chm_layer = chm.2)
stats.4 <- ForestGapR::GapStats(gap_layer = gaps_layers[[4]], chm_layer = chm.2)
stats.5 <- ForestGapR::GapStats(gap_layer = gaps_layers[[5]], chm_layer = chm.2)
}
str(gaps_layers) #see the outcome of the list of layers
sum(stats.1$gap_area)
sum(stats.2$gap_area)
sum(stats.3$gap_area)
stats.1
edit_git_config()
gc()
devtools::install_github("carlos-alberto-silva/ForestGapR")
library(terra)
library(tiff)
library(viridis)
library(raster)
#The development version:
library(devtools)
devtools::install_github("carlos-alberto-silva/ForestGapR")
my_input_dir <- file.path('G:/Temp/B/Uchino/data/chm')
# list all tif files
my_tif_files <- list.files(my_input_dir,
pattern = '*.tif',
full.names = T)
# assign CRS
chm.2 <- rast(my_tif_files[2])
crs(chm.2) <- "EPSG:25832"
# Setting height thresholds (e.g. 10 meters)
threshold<- 20
size<-c(1,1000) # m2. The max and min size to include. Outside this range is not
# plotting chm.2
plot(chm.2, col = viridis(10))
chm_train <- chm.2
# smooth cropped CHMs
w <- matrix(1, 3, 3)
chm_train <- terra::focal(chm_train, w, fun = mean, na.rm = T)
plot(chm.2)
plot(chm_train)
# assign CRS
chm.2 <- rast(my_tif_files[2])
plot(chm.2)
chm_train <- chm.2
chm_train <- terra::focal(chm_train, w, fun = mean, na.rm = T)
plot(chm_train)
# create a binary raster where values greater than 10m are 2 (vegetation) and others are 1
chm_binary_10 <- terra::ifel(chm_train >= 10, 2, 1)
terra::plot(chm_binary_10)
# create a second binary raster where values greater than 5m are 1 (vegetation) and others are 0
chm_binary_5 <- terra::ifel(chm_train >= 5, 1, 0)
terra::plot(chm_binary_3)
terra::plot(chm_binary_5)
# multiplication of the two rasters
chm_gaps <- chm_binary_5 * chm_binary_10
# multiplication of the two rasters
chm_gaps <- chm_binary_5 * chm_binary_10 # to get 3 classes; 2, 1, and 0
terra::plot(chm_gaps)
# combine resulting classes 2 and 1 (vegetation) to unify just as 1
chm_gaps <- terra::ifel(chm_gaps == 2 | chm_gaps == 1, 1, 0)
terra::plot(chm_gaps)
# apply ForestGapR
gaps <- ForestGapR::getForestGaps(chm_gaps,
threshold = 0, # cos 0 is our gaps now, and in the calculation it sets '0 or below'
size = c(10,1000))
# convert the resulting gap raster to polygons
canopy_gaps <- terra::as.polygons(
gaps,
round = TRUE,
aggregate = TRUE,
values = FALSE
)
# convert to an sf object
canopy_gaps <- sf::st_as_sf(canopy_gaps)
terra::plot(chm_train, col = viridis::viridis(50))
terra::plot(canopy_gaps$geometry,
border = 'red',
lwd = 0.5,
add = T)
View(ForestGapR)
View(ForestGapR::getForestGaps)
install.packages('packman')
install.packages('pacman')
installed.packages()
a <- installed.packages()
pacman::p_load(a$Package)
a
a[,1]
pacman::p_load(a[,1])
a
pacman::p_load(a[1:32,1])
pacman::p_upate
library(pacman)
pacman::p_update
install.packages(c("KernSmooth", "survival"))
p_load(HH)
p_load(HH, tidyverse, raster)
#The development version:
library(devtools)
#The development version:
p_load(devtools, terra, tiff, viridis)
devtools::install_github("carlos-alberto-silva/ForestGapR")
# set working directory
my_input_dir <- file.path('G:/Temp/B/Uchino/data/chm')
# list all tif files
my_tif_files <- list.files(my_input_dir,
pattern = '*.tif',
full.names = T)
# assign CRS
chm.2 <- rast(my_tif_files[2])
crs(chm.2) <- "EPSG:25832"
# Setting height thresholds (e.g. 10 meters)
threshold<- 20
size<-c(1,1000) # m2. The max and min size to include. Outside this range is not
# plotting chm.2
plot(chm.2, col = viridis(10))
# gap encoding, plot the map & gaps, get stats at the same time
{
gaps_chm.2 <- ForestGapR::getForestGaps(chm_layer = chm.2, threshold = 15, size = size)
plot(chm.2, col = viridis(10))
plot(gaps_chm.2, col="red", add=TRUE, main="Forest Canopy Gap", legend=FALSE)
gaps_stats_chm.2 <- ForestGapR::GapStats(gap_layer = gaps_chm.2, chm_layer = chm.2)
print(gaps_stats_chm.2)
}
# smooth cropped CHMs
w <- matrix(1, 3, 3)
chm_train <- terra::focal(chm_train, w, fun = mean, na.rm = T)
plot(chm.2)
plot(chm_train)
chm_train <- chm.2
chm_train <- terra::focal(chm_train, w, fun = mean, na.rm = T)
plot(chm_train)
function(focal)
# create focal()# create a binary raster where values greater than 10m are 2 (vegetation) and others are 1
chm_binary_10 <- terra::ifel(chm_train >= 10, 2, 1)
View(function(focal))
View(focal)
View(focal())
View(focal)
View(sum)
View(nlme)
View(nlm)
View(ForestGapR::GapStats)
View(dnorm)
dnorm(23, 2)
norm(23, 2)
rnorm(23, 2)
rnorm(23, 2)
rnorm(20, 5)
rnorm(20, 3)
which.max(rnorm(20, 3))
which.max(rnorm(20, 3))
which.max(rnorm(20, 3))
max(rnorm(20, 3))
max(rnorm(20, 3))
max(rnorm(20, 3))
max(rnorm(20, 3))
max(rnorm(20, 3))
max(rnorm(20, 3))
max(rnorm(20, 3))
max(rnorm(20, 3))
tapply(1e3, 20, rnorm)
tapply(1e3, 1, rnorm)
tapply(1e3, 1, rnorm)
tapply(1e3, rnorm)
tapply(1e3, 20, rnorm)
tapply(1e3, 20, max(rnorm(20, 3)))
tapply(1e3, 20, rnorm(20, 3))
tapply(1e3, 20, rnorm(20, 3))
tapply(1e3, 20, rnorm(203))
tapply(1e3, 20, rnorm())
tapply(1e3, 20, rnorm
tapply(1e3, 20, rnorm)
tapply(1e3, 20, rnorm)
tapply(1e3, 20, rnorm)
tapply(1e3, 20, rnorm)
tapply(1e3, 20, rnorm)
tapply(1e3, 20, rnorm)
tapply(1e^3, 20, rnorm)
tapply(1e3, 20, rnorm)
View(rnorm)
C_rnorm()
?rnorm
View(ForestGapR::getForestGaps())
View(ForestGapR::getForestGaps
View(ForestGapR::getForestGaps)
View(rnorm)
View(ForestGapR::getForestGaps)
View(sats.1)
View(sats.1)
View(sats.4)
stats.1
stats.1$chm_max[stats.1$chm_min == 0]
min.0 <- stats.1$chm_max[stats.1$chm_min == 0]
min.all <- stats.1$chm_max
mean(min.0, min.all)
mean(min.0)
mean(min.all)
# is this significantly different?
max(min.0)
